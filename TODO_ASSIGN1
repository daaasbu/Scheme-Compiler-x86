

P423 COMPILER: Assignment1 Framework:
-------------------------------------

TODO

 * First, read the assignment description.
   
 * In this assignment you will populate the ./Compiler/ directory with
   a file for each pass (verify-scheme.ss, generate-x86-64.ss etc.) with each
   file exporting the corresponding pass (e.g., verify-scheme.ss will export
   verify-scheme).
 
 * Your verify-scheme file must also export the function parse-LverifyScheme as
   well as verify-scheme. parse-LverifyScheme can be defined by calling
   (define-parser parse-LverifyScheme LverifyScheme).

 * As well, you must create the file ./Compiler/compile.ss.
   This is the main entry point into your compiler and must satisfy
   certain constraints for us to be able to execute your compiler.

    - It must define a library named (Compiler compile)
    - That library must export a function 'p423-compile'

    - You may be unfamiliar with the R6RS system for defining scheme
      *libraries* (separate compilation units).  For this first
      assignment we provide example code for compile.ss, which follows
      below.  


-------------------------------------

(library (Compiler compile)
  (export p423-compile p423-step)
  (import
    ;; Load Chez Scheme primitives:
    (chezscheme)
    ;; Load provided compiler framework:
    (Framework driver)
    (Framework wrappers)
    (Framework nanopass)
    (Framework helpers)
    ;; Load your passes from the files you wrote them in:
    (Compiler verify-scheme)
    (Compiler generate-x86-64))

;; Given a thunk that generates assembly code, this will compile the
;; resulting assembly code and output it to a file named t.s
(define (assemble thunk)
  (with-output-to-file "t.s"
    thunk
    'replace)
  (unless (zero? (system "cc -m64 -o t t.s Framework/runtime.c"))
    (error 'assemble "assembly failed"))
  ;; By convention, return the command which will run the code:
  "./t")

(define-compiler (p423-compile p423-step pass->wrapper pass->unparser parse-LverifyScheme)
  (verify-scheme)
  (generate-x86-64 assemble))
) ;; End library

